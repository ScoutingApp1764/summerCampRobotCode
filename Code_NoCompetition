#pragma config(Sensor, in1,    lightSensor1,   sensorLineFollower)
#pragma config(Sensor, dgtl1,  centerWalllUltrasonic, sensorSONAR_cm)
#pragma config(Sensor, dgtl3,  forwardUltrasonic, sensorSONAR_cm)
#pragma config(Sensor, dgtl5,  outerWallUltrasonic, sensorSONAR_cm)
#pragma config(Motor,  port2,           left1,         tmotorServoContinuousRotation, openLoop)
#pragma config(Motor,  port3,           left2,         tmotorServoContinuousRotation, openLoop)
#pragma config(Motor,  port4,           right1,        tmotorServoContinuousRotation, openLoop, reversed)
#pragma config(Motor,  port5,           right2,        tmotorServoContinuousRotation, openLoop, reversed)
#pragma config(Motor,  port6,           servo,         tmotorServoStandard, openLoop)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//


//!!!!!!!!!!!!!!!!!UNCOMMENT FOR COMPETITION!!!!!!!!!!!!!!!!!!!!//
//#define competition

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*        Description: Competition template for VEX EDR                      */
/*                                                                           */
/*---------------------------------------------------------------------------*/

// This code is for the VEX cortex platform
#pragma platform(VEX2)

#ifdef competition
	// Select Download method as "competition"
	#pragma competitionControl(Competition)
	
	//Main competition background code...do not modify!
	#include "Vex_Competition_Includes.c"
#endif

/*---------------------------------------------------------------------------*/
/*                          Pre-Autonomous Functions                         */
/*                                                                           */
/*  You may want to perform some actions before the competition starts.      */
/*  Do them in the following function.  You must return from this function   */
/*  or the autonomous and usercontrol tasks will not be started.  This       */
/*  function is only called once after the cortex has been powered on and    */
/*  not every time that the robot is disabled.                               */
/*---------------------------------------------------------------------------*/
#ifdef competition
void pre_auton()
{
  // Set bStopTasksBetweenModes to false if you want to keep user created tasks
  // running between Autonomous and Driver controlled modes. You will need to
  // manage all user created tasks if set to false.
  bStopTasksBetweenModes = true;

	// Set bDisplayCompetitionStatusOnLcd to false if you don't want the LCD
	// used by the competition include file, for example, you might want
	// to display your team name on the LCD in this function.
	// bDisplayCompetitionStatusOnLcd = false;

  // All activities that occur before the competition starts
  // Example: clearing encoders, setting servo positions, ...
}
#endif
/*---------------------------------------------------------------------------*/
/*                                                                           */
/*                              Autonomous Task                              */
/*                                                                           */
/*  This task is used to control your robot during the autonomous phase of   */
/*  a VEX Competition.                                                       */
/*                                                                           */
/*  You must modify the code to add your own robot specific commands here.   */
/*---------------------------------------------------------------------------*/


//right was reversed

#define DEFAULT_CENTER_WALL_DISTANCE 10
#define TURN_DISTANCE_CENTER 68
#define TURN_DISTANCE_FORWARD 25
//#define MAX_ADDITIONAL_CENTER_WALL_DISTANCE 25
#define BEAR_SPEED_DIFFERENCE 10 //how hard it will adjust

//CONTROLS

#define BUTTON_SWITCH_TELEOP Btn6U
#define BUTTON_SWITCH_AUTO Btn8R
#define BUTTON_SERVO_UP Btn5U
#define BUTTON_SERVO_MIDDLE Btn7R
#define BUTTON_SERVO_DOWN Btn5D
#define AXIS_CONTROL_DISTANCE Ch2
#define BUTTON_CONTROL_DISTANCE Btn8L


//for me later: https://www.vexforum.com/index.php/18408-gears-slipping/0
//replace the axel on the crappy wheel. it could be bent. otherwise, it's structural.
//make the turn decider add the result of both ultrasonic checks and the light sensor check, if 2/3 are positive then turn

enum material
{
	NONE = 0,
	blue = 1,
	grey = 2,
	red = 3,
	silver = 4,
};
bool isRed;
int numLaps;


bool isInRange(short value, int low, int high)
{
	return ((value > low) && (value < high));
}

material getMaterial(short sV) //sensorValue
{
	if (isInRange(sV,2100,22000))
	{
		return blue;
	}
	else if (isInRange(sV,2800,2900))
	{
		return grey;
	}
	else if (isInRange(sV,1700,1800))
	{
		return red;
	}
	else if (isInRange(sV,2700,2800))
	{
		return silver;
	}

	return NONE;
}
enum tasks {
	NONE = 0,
	turnAtCorner = 1,
	turnToRemoveBalls = 2,
	removeBalls = 3,
	stopRemovingBalls = 4,
	goStraight = 5,
	moveOutOfStart = 6,
	turnAvoidWall = 7,

};
enum directions {
	STOP = 0,
	right = 1,
	left = 2,
	straight = 3,
};
int targetCenterDistance = DEFAULT_CENTER_WALL_DISTANCE;
tasks currentTask = moveOutOfStart;
directions straightBearDirection = straight;
short servoPosition = 20;
bool driverControl = true;
//
short centerDistanceReal;
short centerDistance;

int oldCenterUltrasonic1 = 0;
int oldCenterUltrasonic2 = 0;
//
short outerDistanceReal;
short outerDistance;

int oldOuterUltrasonic1 = 0;
int oldOuterUltrasonic2 = 0;
//
short forwardDistanceReal;
short forwardDistance;

int oldForwardUltrasonic1 = 0;
int oldForwardUltrasonic2 = 0;
//
task updateUltrasonic()
{
	while (true)
	{
		oldCenterUltrasonic2 = oldCenterUltrasonic1;
		oldCenterUltrasonic1 = centerDistance;
		centerDistanceReal= SensorValue[centerWalllUltrasonic];
		centerDistance = (oldCenterUltrasonic2/3)+(oldCenterUltrasonic1/3)+(centerDistanceReal/3);

		//
		oldOuterUltrasonic2 = oldOuterUltrasonic1;
		oldOuterUltrasonic1 = outerDistance;
		outerDistanceReal= SensorValue[outerWallUltrasonic];
		outerDistance = (oldOuterUltrasonic2/3)+(oldOuterUltrasonic1/3)+(outerDistanceReal/3);
		//

		oldForwardUltrasonic2 = oldForwardUltrasonic1;
		oldForwardUltrasonic1 = forwardDistance;
		forwardDistanceReal= SensorValue[forwardUltrasonic];
		forwardDistance = (oldForwardUltrasonic2/3)+(oldForwardUltrasonic1/3)+(forwardDistanceReal/3);
		wait1Msec(100);
	}
}

task senseLines()
{

}

task deadmanSwitch()
{
	if (driverControl)
	{
		if (vexRT(BUTTON_SWITCH_TELEOP) ==1)
		{
			clearTimer(1);
		}
	}
	if(time1[1] >= 5000)
	{
		driverControl = false;
	}
}
bool canSwitchMode(int minTimeForMode)
{
	if (time1[2] >= minTimeForMode)
	{
		return true;
	}
	return false;
}
void autonomous_code(bool semiauto)
{
	if (semiauto)
	{
		if (driverControl)
		{
			if (vexRT[BUTTON_SWITCH_AUTO] == 1)
			{
				driverControl = false;
				currentTask = goStraight;
				//do not clear the timer in case it needs to turn
				return;
			}
			if (vexRT[BUTTON_SERVO_UP] == 1)
			{
				servoPosition=127;
			}
			if (vexRT[BUTTON_SERVO_DOWN] == 1)
			{
				servoPosition=-100;
			}
			if (vexRT[BUTTON_SERVO_MIDDLE] == 1)
			{
				servoPosition=-10;
			}
			motor[left1] = vexRT[Ch3];
			motor[left2] = vexRT[Ch3];
			motor[right1] = vexRT[Ch2];
			motor[right2] = vexRT[Ch2];

			motor[servo] = servoPosition;




			return;
		}
		else
		{
			if (vexRT[BUTTON_SWITCH_TELEOP] == 1)
			{
				driverControl = true;
			}
			if (vexRT[BUTTON_CONTROL_DISTANCE] == 1) //if the button for changing the center-wall distance is held
			{
				targetCenterDistance = (vexRT[AXIS_CONTROL_DISTANCE]/(127/90)); //adjust the analog stick input to actual distance on field
			}
		}

	}
	if (( !driverControl) || (!semiauto) )
	{
		if ( currentTask == goStraight )
		{
			//we'll need to check for objects arround us, and of course, go straight

			short forwardDistance = SensorValue[forwardUltrasonic];




			//if either the centerDistance is at threshold and not -1, or the forward distance is at threshold and not -1, and we can switch modes, then switch modes.
			if ( ( ((centerDistance > TURN_DISTANCE_CENTER)&&centerDistance != -1) || ((forwardDistance < TURN_DISTANCE_FORWARD)&&forwardDistance != -1) ) && canSwitchMode(1500)) //almost looks like lisp
			{
				clearTimer(2);
				currentTask = turnAtCorner;
				autonomous_code(semiauto); //re-run the autonomous code for this tick
				return;
			}
			if ( outerDistance < 12 && canSwitchMode(1500))
			{
				clearTimer(2);
				currentTask = turnAvoidWall;
				autonomous_code(semiauto); //re-run the autonomous code for this tick
				return;
		}


			if (centerDistance != -1)
			{

				if (centerDistance > targetCenterDistance)
				{
					straightBearDirection = left;
				}
				else if (centerDistance < targetCenterDistance)
				{
					straightBearDirection = right;
				}
				else
				{
					straightBearDirection = straight;
				}
			}

			//The idea behind this is that the robot will constantly adjust to keep in the center. It will constantly be turning slightly. The bigger the gap in where it should be, the harsher the veer.
			if (straightBearDirection == left)
			{
				motor[left1] = 127;
				motor[left2] = 127;
				motor[right1] = 127-((centerDistance-targetCenterDistance)/BEAR_SPEED_DIFFERENCE);
				motor[right2] = 127-((centerDistance-targetCenterDistance)/BEAR_SPEED_DIFFERENCE);
			}
			else if (straightBearDirection == right)
			{
				motor[left1] = 127-((targetCenterDistance-centerDistance)/BEAR_SPEED_DIFFERENCE);
				motor[left2] = 127-((targetCenterDistance-centerDistance)/BEAR_SPEED_DIFFERENCE);
				motor[right1] = 127;
				motor[right2] = 127;
			}




		}
		else if ( currentTask == turnAtCorner)
		{
			motor[left1] = -127;//60;
			motor[left2] = -127;//60;
			motor[right1] = 127;
			motor[right2] = 127;
			float centerDistance = SensorValue(centerWalllUltrasonic);
			if (/*(centerDistance != -1) &&(centerDistance <= TURN_DISTANCE_CENTER) &&*/ canSwitchMode(1600))
			{
				clearTimer(2);
				currentTask = goStraight;
			}
		}
		else if ( currentTask == turnAvoidWall)
		{
			motor[left1] = 127;//60;
			motor[left2] = 127;//60;
			motor[right1] = -127;
			motor[right2] = -127;
			float centerDistance = SensorValue(centerWalllUltrasonic);
			if (/*(centerDistance != -1) &&(centerDistance <= TURN_DISTANCE_CENTER) &&*/ canSwitchMode(1500))
			{
				clearTimer(2);
				currentTask = goStraight;
			}
		}
		else if ( currentTask == turnToRemoveBalls)
		{
			//this will not be called during teleop, and thus doesn't have to return back
			motor[left1] = 127;
			motor[left2] = 127;
			motor[right1] = -127;
			motor[right2] = -127;


			wait1Msec(2000);
			currentTask = removeBalls;
		}
		else if (currentTask == removeBalls)
		{
			motor[servo] = 50;

			motor[left1] = 127;
			motor[left2] = 127;
			motor[right1] = 127;
			motor[right2] = 127;

			wait1Msec(3000);
			currentTask = stopRemovingBalls;
		}
		else if (currentTask == stopRemovingBalls)
		{
			motor[left1] = -127;
			motor[left2] = -127;
			motor[right1] = 127;
			motor[right2] = 127;


			wait1Msec(2000);
			currentTask = goStraight;
		}
		else if (currentTask == moveOutOfStart)
		{
			motor[left1] = 127;
			motor[left2] = 127;
			motor[right1] = 127;
			motor[right2] = 127;
			motor[servo] = 127;

			wait1Msec(5000);
			currentTask = goStraight;
		}
		/*
		else if (currentTask == makeTea) TODO
		*/
	}
}


//field width on big is 102
//small width is 42


//red tape is about 260
//blue is 400
//red is about 440



task autonomous()
{
  // ..........................................................................
  // Insert user code here.
  // ..........................................................................

  // Remove this function call once you have "real" code.
	while (true)
	{
  	autonomous_code(false);
	}
}

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*                              User Control Task                            */
/*                                                                           */
/*  This task is used to control your robot during the user control phase of */
/*  a VEX Competition.                                                       */
/*                                                                           */
/*  You must modify the code to add your own robot specific commands here.   */
/*---------------------------------------------------------------------------*/

task usercontrol()
{
  // User control code here, inside the loop
	startTask(deadmanSwitch);
  while (true)
  {
    // This is the main execution loop for the user control program.
    // Each time through the loop your program should update motor + servo
    // values based on feedback from the joysticks.

    // ........................................................................
    // Insert user code here. This is where you use the joystick values to
    // update your motors, etc.
    // ........................................................................

    // Remove this function call once you have "real" code.
   	//utonomous_code(true);

  	autonomous_code(true);



  }
}
#ifndef competiton
short readout;
task main()
{
	driverControl = true;
	startTask(updateUltrasonic);
	while(true){
readout = SensorValue(lightSensor1);

	autonomous_code(true);

	}

}
#endif

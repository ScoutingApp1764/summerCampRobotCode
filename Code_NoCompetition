#pragma config(Sensor, in1,    lightSensor1,   sensorReflection)
#pragma config(Sensor, dgtl1,  centerWalllUltrasonic, sensorSONAR_cm)
#pragma config(Sensor, dgtl3,  forwardUltrasonic, sensorSONAR cm)
#pragma config(Motor,  port2,			left1,		   tmotorServoContinuousRotation, openLoop, reversed)
#pragma config(Motor,  port3,			left2,		   tmotorServoContinuousRotation, openLoop, reversed)
#pragma config(Motor,  port4,			right1,		   tmotorServoContinuousRotation, openLoop)
#pragma config(Motor,  port5,			right2,		   tmotorServoContinuousRotation, openLoop, reversed)
#pragma config(Motor,  port6,			servo,		   tmotorServoStandard, openLoop)
//*!!Code automatically generated by 'ROBOTC' configuration wizard				 !!*//

#define DEFAULT_CENTER_WALL_DISTANCE 10
#define TURN_DISTANCE_CENTER 100
#define TURN_DISTANCE_FORWARD 10
//#define MAX_ADDITIONAL_CENTER_WALL_DISTANCE 25
#define BEAR_SPEED_DIFFERENCE 25

enum material
{
	NONE = 0,
	blue = 1,
	grey = 2,
	red = 3,
	silver = 4,
};
bool isRed;
int numLaps;


bool isInRange(short value, int low, int high)
{
	return ((value > low) && (value < high));
}

material getMaterial(short sV) //sensorValue
{
	if (isInRange(sV,2100,22000))
	{
		return blue;
	}
	else if (isInRange(sV,2800,2900))
	{
		return grey;
	}
	else if (isInRange(sV,1700,1800))
	{
		return red;
	}
	else if (isInRange(sV,2700,2800))
	{
		return silver;
	}

	return NONE;
}
enum tasks {
	NONE = 0,
	turnAtCorner = 1,
	turnToRemoveBalls = 2,
	removeBalls = 3,
	stopRemovingBalls = 4,
	goStraight = 5,
	moveOutOfStart = 6,
	
};
enum directions {
	STOP = 0,
	right = 1,
	left = 2,
	straight = 3,
};
int targetCenterDistance = DEFAULT_CENTER_WALL_DISTANCE;
tasks currentTask = goStraight;
directions straightBearDirection = straight;
short servoPosition = 20;
bool driverControl = false;


bool canSwitchMode(int minTimeForMode)
{
	if (time1[2] >= minTimeForMode)
	{
		return true;
	}
	return false;
}
void autonomous_code(bool semiauto)
{
	if (semiauto)
	{
		if (vexRT[BUTTON NAME HERE] == 1)
		{
			driverControl = !driverControl;
		}	
		if (vexRT[BN] == 1)
		{
			servoPosition++;
		}
		if (vexRT[BN] == 1)
		{
			servoPosition--;
		}
		if (driverControl)
		{
			motor[left1] = vexRT[Ch2];
			motor[left2] = vexRT[Ch2];
			motor[right1] = vexRT[Ch3];
			motor[right2] = vexRT[Ch3];

			motor[servo] = servoPosition;




			return;
		}
	}
	if ( currentTask == goStraight)
	{
		//we'll need to check for objects arround us, and of course, go straight
		short centerDistance= SensorValue[centerWalllUltrasonic];
		short forwardDistance = SensorValue[forwardUltrasonic];
		
		//if either the centerDistance is at threshold and not -1, or the forward distance is at threshold and not -1, and we can switch modes, then switch modes.
		if ( ( ((centerDistance > TURN_DISTANCE_CENTER)&&centerDistance != -1) || ((forwardDistance < TURN_DISTANCE_FORWARD)&&forwardDistance != -1) ) && canSwitchMode(1500)) //almost looks like lisp
		{
			clearTimer(2);
			currentTask = turnAtCorner; 
			autonomous_code(semiauto); //re-run the autonomous code for this tick
			return;
		}

		if (centerDistance != -1)
		{	
			
			if (centerDistance > targetCenterDistance)
			{
				straightBearDirection = left;
			}
			else if (centerDistance < targetCenterDistance)
			{
				straightBearDirection = right;
			}
			else
			{
				straightBearDirection = straight;
			}
		}
		
		if (straightBearDirection == left)
		{
			
			
			motor[left1] = 127-BEAR_SPEED_DIFFERENCE;
			motor[left2] = 127-BEAR_SPEED_DIFFERENCE;
			motor[right1] = 127;
			motor[right2] = 127;
		}
		else if (straightBearDirection == right)
		{
			motor[left1] = 127;
			motor[left2] = 127;
			motor[right1] = 127-BEAR_SPEED_DIFFERENCE;
			motor[right2] = 127-BEAR_SPEED_DIFFERENCE;
		}
		
			
		
		
	}
	else if ( currentTask == turnAtCorner)
	{
		motor[left1] = -127;//60;
		motor[left2] = -127;//60;
		motor[right1] = 127;
		motor[right2] = 127;
		double centerDistance = SensorValue(centerWalllUltrasonic);
		if ((centerDistance != -1) &&(centerDistance <= TURN_DISTANCE_CENTER) && canSwitchMode(1650))
		{
			clearTimer(2);
			currentTask = goStraight;
		}
	}
	else if ( currentTask == turnToRemoveBalls)
	{
		//this will not be called during teleop, and thus doesn't have to return back
		motor[left1] = 127;
		motor[left2] = 127;
		motor[right1] = -127;
		motor[right2] = -127;


		waitInMiliseconds(2000);
		currentTask = removeBalls
	}
	else if (currentTask == removeBalls)
	{
		motor[servo] = 50;

		motor[left1] = 127;
		motor[left2] = 127;
		motor[right1] = 127;
		motor[right2] = 127;

		waitInMiliseconds(3000);
	}
	else if (currentTask == stopRemovingBalls)
	{
		motor[left1] = -127;
		motor[left2] = -127;
		motor[right1] = 127;
		motor[right2] = 127;


		waitInMiliseconds(2000);
	}
	else if (currentTask == moveOutOfStart)
	{
		motor[left1] = 127;
		motor[left2] = 127;
		motor[right1] = 127;
		motor[right2] = 127;

		waitInMiliseconds(3000);
	}
}

void ManuallyResetAuto()
{
	currentTask = goStraight;
}
short readout;
task main()
{ 

	while(true){
		/*motor[left1] = vexRT[Ch3];
	motor[left2] = vexRT[Ch3];
	motor[right1] = vexRT[Ch2];
	motor[right2] = vexRT[Ch2];*/
	readout = SensorValue(centerWalllUltrasonic);
	
	autonomous_code(false);

	}
}

//field width on big is 102
//small width is 42


//red tape is about 260
//blue is 400
//red is about 440

